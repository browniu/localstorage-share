!function (e, n) {
    var r = {};
    n(r), "function" == typeof define && define.amd ? define("PenPal", r.default) : e.PenPal = r.default
}(this, function (e) {
    "use strict";

    function n(e) {
        if (Array.isArray(e)) {
            for (var n = 0, r = Array(e.length); n < e.length; n++) r[n] = e[n];
            return r
        }
        return Array.from(e)
    }

    function r() {
        if (p.debug) {
            for (var e, n = arguments.length, r = Array(n), t = 0; t < n; t++) r[t] = arguments[t];
            (e = console).log.apply(e, ["[PenPal]"].concat(r))
        }
    }

    function t(e) {
        var n = document.location, r = document.createElement("a");
        return r.href = e, r.origin || (r.protocol || n.protocol) + "//" + (r.hostname || n.hostname) + ":" + (r.port || n.port)
    }

    function a(e, n) {
        var t = e.localName, a = e.local, o = e.remote, i = e.remoteOrigin;
        r(t + ": Creating call sender");
        var d = function (e) {
            return function () {
                for (var n = arguments.length, d = Array(n), c = 0; c < n; c++) d[c] = arguments[c];
                return r(t + ": Sending " + e + "() call"), new p.Promise(function (n, c) {
                    var l = v(), f = function d(s) {
                        s.source === o && s.origin === i && s.data.penpal === u && s.data.id === l && (r(t + ": Received " + e + "() reply"), a.removeEventListener("message", d), (s.data.resolution === m ? n : c)(s.data.returnValue))
                    };
                    a.addEventListener("message", f), o.postMessage({penpal: s, id: l, methodName: e, args: d}, i)
                })
            }
        };
        return n.reduce(function (e, n) {
            return e[n] = d(n), e
        }, {})
    }

    function o(e, t) {
        var a = e.localName, o = e.local, i = e.remote, d = e.remoteOrigin;
        r(a + ": Connecting call receiver");
        var c = function (e) {
            e.source === i && e.origin === d && e.data.penpal === s && !function () {
                var o = e.data, c = o.methodName, l = o.args, s = o.id;
                if (r(a + ": Received " + c + "() call"), c in t) {
                    var v = function (e) {
                        return function (n) {
                            r(a + ": Sending " + c + "() reply"), i.postMessage({
                                penpal: u,
                                id: s,
                                resolution: e,
                                returnValue: n
                            }, d)
                        }
                    };
                    p.Promise.resolve(t[c].apply(t, n(l))).then(v(m), v(f))
                }
            }()
        };
        return o.addEventListener("message", c), r(a + ": Awaiting calls..."), function () {
            o.removeEventListener("message", c)
        }
    }

    Object.defineProperty(e, "__esModule", {value: !0});
    var i = "parent", d = "child", c = "handshake", l = "handshake-reply", s = "call", u = "reply", m = "fulfilled",
        f = "rejected", p = {
            Promise: function () {
                try {
                    return window ? window.Promise : null
                } catch (e) {
                    return null
                }
            }(), debug: !1
        }, v = function () {
            var e = 0;
            return function () {
                return ++e
            }
        }();
    p.connectToChild = function (e) {
        var n = e.url, d = e.appendTo, s = e.methods, u = void 0 === s ? {} : s, m = window,
            f = document.createElement("iframe");
        (d || document.body).appendChild(f);
        var v = f.contentWindow || f.contentDocument.parentWindow, g = t(n);
        return new p.Promise(function (e) {
            var t = function n(t) {
                t.source === v && t.origin === g && t.data.penpal === l && !function () {
                    r("Parent: Received handshake reply from Child"), m.removeEventListener("message", n);
                    var d = {localName: i, local: m, remote: v, remoteOrigin: t.origin}, c = o(d, u),
                        l = a(d, t.data.methodNames);
                    l.iframe = f, l.destroy = function () {
                        c(), f.parentNode.removeChild(f)
                    }, e(l)
                }()
            };
            m.addEventListener("message", t), f.addEventListener("load", function () {
                r("Parent: Sending handshake"), setTimeout(function () {
                    v.postMessage({penpal: c, methodNames: Object.keys(u)}, g)
                })
            }), r("Parent: Loading iframe"), f.src = n
        })
    }, p.connectToParent = function (e) {
        var n = e.parentOrigin, t = e.methods, i = void 0 === t ? {} : t, s = window, u = s.parent;
        return new p.Promise(function (e) {
            var t = function t(m) {
                if ((!n || m.origin === n) && m.data.penpal === c) {
                    r("Child: Received handshake from Parent"), s.removeEventListener("message", t), r("Child: Sending handshake reply to Parent"), m.source.postMessage({
                        penpal: l,
                        methodNames: Object.keys(i)
                    }, m.origin);
                    var f = {localName: d, local: s, remote: u, remoteOrigin: m.origin};
                    o(f, i), e(a(f, m.data.methodNames))
                }
            };
            s.addEventListener("message", t)
        })
    }, e.default = p
});
